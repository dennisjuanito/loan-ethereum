{"version":3,"file":"static/webpack/static/development/pages/index.js.b3b4ac1d414010687230.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, {Component} from 'react';\nimport LoanFactory from '../contracts/LoanFactory.json';\nimport Loan from '../../client/utils/loan';\nimport getWeb3 from '../utils/getWeb3';\nimport Layout from '../components/Layout';\n\nclass LoanIndex extends Component {\n    state = {storageValue: 0, web3: null, accounts: null, contract: null, loans: []};\n\n    static async getInitialProps(props) {\n        // const loan = Loan(props.query.address);\n        let deployedLoanContract;\n        try {\n            const web3 = await getWeb3();\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = LoanFactory.networks[networkId];\n            const loanFactoryInstance = new web3.eth.Contract(LoanFactory.abi, deployedNetwork.address);\n            deployedLoanContract = await loanFactoryInstance.methods.getDeployedLoans().call();\n        } catch (error) {\n            throw error;\n        }\n\n        return {\n            loans: deployedLoanContract\n        };\n    }\n\n    renderLoans = async () => {\n        console.log(this.props.loans);\n        const promiseArray = await Promise.all(\n            this.props.loans.map(address => {\n                // const loan = Loan(address).then(data => {\n                //     console.log(data);\n                // });\n                const loan = Loan(address);\n                console.log(loan);\n                debugger;\n                return loan;\n            })\n        );\n        console.log(promiseArray);\n        this.state.loans = [...promiseArray];\n        console.log(promiseArray);\n        return {promiseArray};\n    };\n\n    componentDidMount = async () => {\n        try {\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            // Get the contract instance.\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = LoanFactory.networks[networkId];\n\n            const instance = new web3.eth.Contract(LoanFactory.abi, deployedNetwork.address);\n\n            // await instance.methods.createLoan().send({from: accounts[0]});\n            let deployedLoans = await instance.methods.getDeployedLoans().call();\n\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({web3, accounts, contract: instance});\n            // this.setState({web3, accounts, contract: instance}, this.runExample);\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n            console.error(error);\n        }\n    };\n\n    runExample = async () => {\n        const {accounts, contract} = this.state;\n\n        // Stores a given value, 5 by default\n        console.log(accounts[0]);\n        console.log(contract);\n\n        await contract.methods.createLoan().send({from: accounts[0]});\n\n        // Get the value from the contract to prove it worked.\n        // const response = await contract.methods.get().call();\n\n        // Update state with the result.\n        // this.setState({ storageValue: response });\n    };\n\n    render() {\n        // if (!this.state.web3) {\n        //     return <div>Loading Web3, accounts, and contract...</div>;\n        // }\n        this.renderLoans();\n        console.log(this.state.loans);\n        return (\n            <Layout>\n                <h1>Good to Go!</h1>\n                <p>Your Truffle Box is installed and ready.</p>\n                <h2>Smart Contract Example</h2>\n                <p>\n                    If your contracts compiled and migrated successfully, below will show a stored value\n                    of 5 (by default).\n                </p>\n                <p>\n                    Try changing the value stored on <strong>line 40</strong> of App.js.\n                </p>\n                <div>The stored value is: {this.state.storageValue}</div>\n                {/* {this.renderLoans()} */}\n            </Layout>\n        );\n    }\n}\n\nexport default LoanIndex;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAEA;AAWA;AACA;AACA;AAfA;AAgBA;AAAA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAMA;AANA;AAAA;AACA;AADA;AASA;AACA;AAEA;AACA;AAbA;AAAA;AACA;AADA;AAeA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AArBA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AA2BA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AALA;AAAA;AAOA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;;;;;;AAvGA;;;;;;;;AAIA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;;AACA;AACA;;AADA;;;;;;;;;;AAKA;AACA;AADA;AACA;;;;;;;;;;;;;;;;AAjBA;AACA;AA4GA;;;;A","sourceRoot":""}